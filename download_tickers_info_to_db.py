import yfinance as yf
import pandas as pd
import requests
from sqlalchemy import create_engine
from urllib.parse import urlparse

# --- 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
DB_URL = "postgresql+psycopg2://postgres:sultan2004@localhost/RASdevAI_auth"
engine = create_engine(DB_URL)

# --- 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π S&P 500 ---
def get_sp500_tickers():
    url = "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
    tables = pd.read_html(url)
    df = tables[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    return df["Symbol"].tolist()

tickers = get_sp500_tickers()
print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤: {tickers[:5]} ...")

# --- 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ yfinance ---
def get_company_info(ticker):
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        if not info:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ website –¥–ª—è image_url
        website = info.get("website", "")
        domain = urlparse(website).netloc if website else ""
        image_url = f"https://logo.clearbit.com/{domain}" if domain else None

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        company_data = {
            "ticker": ticker,
            "shortName": info.get("shortName", ""),  # –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            "longName": info.get("longName", ""),    # –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            "address": info.get("address1", ""),
            "city": info.get("city", ""),
            "country": info.get("country", ""),
            "website": website,
            "industry": info.get("industry", ""),
            "sector": info.get("sector", ""),
            "summary": info.get("longBusinessSummary", ""),
            "image_url": image_url
        }
        return company_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {ticker}: {e}")
        return None

# --- 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL ---
def save_to_postgres(df, table_name="company_info"):
    df.to_sql(table_name, engine, if_exists="append", index=False)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {table_name} –¥–ª—è {len(df)} –∫–æ–º–ø–∞–Ω–∏–π")

# --- 5. –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤ ---
def process_tickers(tickers):
    all_data = []
    for ticker in tickers:
        print(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {ticker} ...")
        company_info = get_company_info(ticker)
        if company_info:
            all_data.append(company_info)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
    if all_data:
        df = pd.DataFrame(all_data)
        df.columns = df.columns.str.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        save_to_postgres(df)
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

# --- 6. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
process_tickers(tickers)
print("üéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")


# CREATE TABLE company_info (
#     ticker VARCHAR(10) PRIMARY KEY,
#     shortname VARCHAR(100),          -- –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
#     longname VARCHAR(255),           -- –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
#     address VARCHAR(255),
#     city VARCHAR(100),
#     country VARCHAR(100),
#     website VARCHAR(255),
#     industry VARCHAR(100),
#     sector VARCHAR(100),
#     summary TEXT,
#     image_url VARCHAR(255)
# );