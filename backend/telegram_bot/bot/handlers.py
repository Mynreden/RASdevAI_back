from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import traceback

from bot.schemas import StockResponse
from bot.services import LoginService, StockService  # –¥–æ–±–∞–≤–∏–ª StockService –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞

class LoginStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_password = State()

class BotHandler:
    def __init__(self):
        self.router = Router()
        self.login_service = LoginService()
        self.stock_service = StockService()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.router.message.register(self.start_handler, F.text.in_({"/start", "/login"}))
        self.router.message.register(self.email_entered, LoginStates.waiting_for_email)
        self.router.message.register(self.password_entered, LoginStates.waiting_for_password)

        self.router.callback_query.register(self.show_companies, F.data == "menu_companies")
        self.router.callback_query.register(self.company_actions, F.data.startswith("company_"))
        self.router.callback_query.register(self.show_news, F.data.startswith("news_"))
        self.router.callback_query.register(self.show_main_menu, F.data == "menu_main")
        self.router.callback_query.register(self.show_forecast, F.data.startswith("forecast_"))
        self.router.callback_query.register(self.show_price_history, F.data.startswith("history_"))


    async def start_handler(self, message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
        await state.set_state(LoginStates.waiting_for_email)

    async def email_entered(self, message: Message, state: FSMContext):
        await state.update_data(email=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(LoginStates.waiting_for_password)

    async def password_entered(self, message: Message, state: FSMContext):
        data = await state.get_data()
        email = data.get("email")
        password = message.text
        telegram_id = message.from_user.id

        try:
            is_success = await self.login_service.login_user(email, password, telegram_id)
            if is_success:
                await message.answer(
                    "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. Telegram ID –ø—Ä–∏–≤—è–∑–∞–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=self.main_menu()
                )
                await state.clear()
            else:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await state.clear()
            traceback.print_exc()
            print(e)

    def main_menu(self):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="menu_companies")]
        ])
        return keyboard

    async def show_companies(self, callback: CallbackQuery):
        companies = await self.stock_service.get_companies()

        if not companies:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π.", show_alert=True)
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=company.shortname, callback_data=f"company_{company.ticker}")]
                for company in companies
            ]
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=keyboard)

    async def company_actions(self, callback: CallbackQuery):
        ticker = callback.data.split("_", 1)[1]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìâ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data=f"forecast_{ticker}")],
            [InlineKeyboardButton(text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data=f"news_{ticker}_0")],
            [InlineKeyboardButton(text="üíπ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data=f"history_{ticker}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]
        ])

        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é {ticker}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=keyboard)

    async def show_news(self, callback: CallbackQuery):
        _, ticker, index_str = callback.data.split("_")
        index = int(index_str)

        news_list = await self.stock_service.get_news(ticker)

        if not news_list:
            await callback.answer("–ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", show_alert=True)
            return

        if index < 0 or index >= len(news_list):
            await callback.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.", show_alert=True)
            return
        
        MAX_LENGTH = 100  # –ø–æ—Ä–æ–≥ –¥–ª–∏–Ω—ã

        news = news_list[index]
        sentiment = self._format_sentiment(news.positive, news.negative, news.neutral)
        formatted_date = news.date.strftime("%Y-%m-%d %H:%M")
        content = news.content
        if len(content) > MAX_LENGTH:
            content = content[:MAX_LENGTH] + "...\n\nüìé <a href='https://rasdevai.vercel.app'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ rasdevai.vercel.app</a>"

        text = (
            f"üì∞ <b>{news.title}</b>\n\n"
            f"{content}\n\n"
            f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: <i>{news.source}</i>\n"
            f"üóì –î–∞—Ç–∞: {formatted_date}\n"
            f"üß† –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–∏: {sentiment}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"news_{ticker}_{index - 1}" if index > 0 else f"news_{ticker}_0"
                ),
                InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"news_{ticker}_{index + 1}" if index < len(news_list) - 1 else f"news_{ticker}_{index}"
                )
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    # –í—Å—Ç–∞–≤—å —ç—Ç–æ –≤ –∫–æ–Ω–µ—Ü BotHandler
    async def show_main_menu(self, callback: CallbackQuery):
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=self.main_menu())
        await callback.message.delete()  # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    async def show_forecast(self, callback: CallbackQuery):
        ticker = callback.data.split("_")[1]
        forecast = await self.stock_service.get_forecast(ticker)  # –≤–µ—Ä–Ω—ë—Ç LSTMForecastResponseMonth

        if not forecast or not forecast.predicted_prices:
            await callback.answer("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
            return

        forecast_text = "\n".join([
            f"üìà –î–µ–Ω—å {i + 1}: {price:.2f} USD"
            for i, price in enumerate(forecast.predicted_prices)
        ])

        await callback.message.answer(
            f"üìâ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ <b>{ticker}</b> –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n{forecast_text}",
            reply_markup=self.back_to_main_menu(),
            parse_mode="HTML"
        )
        await callback.message.delete()

    async def show_price_history(self, callback: CallbackQuery):
        ticker = callback.data.split("_")[1]
        history: StockResponse = await self.stock_service.get_price_history(ticker)

        if not history or not history.priceData:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
            return

        price_lines = "\n".join([
            f"üìÖ {data.date}: {data.value:.2f} USD"
            for data in history.priceData[-7:]  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π
        ])

        text = (
            f"üè¢ <b>{history.companyName}</b> ({history.ticker})\n"
            f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {history.currentPrice:.2f} USD\n"
            f"üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {history.shareChange:.2f}%\n\n"
            f"üíπ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n{price_lines}"
        )

        await callback.message.answer(
            text,
            reply_markup=self.back_to_main_menu(),
            parse_mode="HTML"
        )
        await callback.message.delete()


    def back_to_main_menu(self):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]
        ])


    def _format_sentiment(self, positive: float, negative: float, neutral: float) -> str:
        # –û–ø—Ä–µ–¥–µ–ª–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if positive > negative and positive > neutral:
            return f"üü¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è ({positive:.2f})"
        elif negative > positive and negative > neutral:
            return f"üî¥ –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è ({negative:.2f})"
        else:
            return f"‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è ({neutral:.2f})"


# –í —Ç–æ—á–∫–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:
# from bot.handlers import BotHandler
# bot_handler = BotHandler()
# dp.include_router(bot_handler.router)
